version: 2

workflows:
  version: 2
  test-build-release:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - release-pypi:
          requires:
            - build
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - release-github:
          requires:
            - build
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
jobs:
  test:
    docker:
      - image: cimg/python:3.8.1
        user: root

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Setup python2 and test environment
          command: |
            apt-get update || apt-get update 
            apt-get install -y python2.7
            pip3 install nose
            wget https://bootstrap.pypa.io/pip/2.7/get-pip.py
            python2.7 get-pip.py
            python2.7 -m pip install nose
            mkdir test-reports

      - run:
          name: Spawn bridge server and run tests (3->2 server)
          command: |
            export TEST_PORT=3322
            export ERR_LOG=/tmp/script32.err
            touch $ERR_LOG
            python2.7 test_bridge_server.py >/tmp/script.log 2> >(tee -a $ERR_LOG >&2) & # Run the test jfx_bridge server
            ( tail -f $ERR_LOG & ) | grep -q "jfx_bridge.bridge:serving!" # pause until we see the bridge server start logging messages
            python3 -m nose --with-xunit --xunit-file=test-reports/nosetests-3to2.xml
            
      - run:
          name: Spawn bridge server and run tests (2->2 server)
          command: |
            export TEST_PORT=2222
            export ERR_LOG=/tmp/script22.err
            touch $ERR_LOG
            python2.7 test_bridge_server.py >/tmp/script.log 2> >(tee -a $ERR_LOG >&2) & # Run the test jfx_bridge server
            ( tail -f $ERR_LOG & ) | grep -q "jfx_bridge.bridge:serving!" # pause until we see the bridge server start logging messages
            python2.7 -m nose --with-xunit --xunit-file=test-reports/nosetests-2to2.xml

      - run:
          name: Spawn bridge server and run tests (2->3 server)
          command: |
            export TEST_PORT=2233
            export ERR_LOG=/tmp/script23.err
            touch $ERR_LOG
            python3 test_bridge_server.py >/tmp/script.log 2> >(tee -a $ERR_LOG >&2) & # Run the test jfx_bridge server
            ( tail -f $ERR_LOG & ) | grep -q "jfx_bridge.bridge:serving!" # pause until we see the bridge server start logging messages
            python2.7 -m nose --with-xunit --xunit-file=test-reports/nosetests-2to3.xml

      - run:
          name: Spawn bridge server and run tests (3->3 server)
          command: |
            export TEST_PORT=3333
            export ERR_LOG=/tmp/script33.err
            touch $ERR_LOG
            python3 test_bridge_server.py >/tmp/script.log 2> >(tee -a $ERR_LOG >&2) & # Run the test jfx_bridge server
            ( tail -f $ERR_LOG & ) | grep -q "jfx_bridge.bridge:serving!" # pause until we see the bridge server start logging messages
            python3 -m nose --with-xunit --xunit-file=test-reports/nosetests-3to3.xml              

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
            
  build:
    docker:
      - image: cimg/python:3.10.2

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Build jfx_bridge package
          command: |
            pip3 install --user --upgrade setuptools # make sure we've got the latest version, to support using Markdown
            python3 setup.py sdist bdist_wheel --universal

      - store_artifacts:
          path: dist
          
      - persist_to_workspace:
          root: .
          paths:
            - dist/
  
  release-pypi:
    docker:
      - image: circleci/python:3.8.1
    steps:
      - run:
          name: Get twine
          command: |
            pip3 install --user --upgrade twine
      - attach_workspace:
          at: ./workspace     
      - run:
          name: upload to pypi
          command: |
            python3 -m twine upload ./workspace/dist/*
            
  release-github:
    docker:
      - image: cibuilds/github:0.12
    steps:
      - checkout
      - attach_workspace:
          at: ./workspace
      - run:
          name: upload to github
          command: |
            VERSION=$(git describe)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./workspace/dist/            
        
